#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This file was automatically generated by ../census_etl/census_spec_scanner.py on Wed Jan 30 11:00:49 2019
# Command line: ../census_etl/census_spec_scanner.py 2018_mdf.docx --output_parser mdf_validator_classes.py --ignore QREL,QSEX,QSPANX,QRACE1,QRACE2,QRACE3,QRACE4,QRACE5,QRACE6,QRACE7,QRACE8,CIT,HHT,HHT2,NPF,CPLT,UPART,MULTG,HHLDRAGE,HHSPAN,HHRACE,PAOC,P18,P60,P65,P75


def leftpad(x,width):
    return ' '*(width-len(str(x)))+str(x)

def between(a,b,c,width):
    return leftpad(a,width) <= leftpad(b,width) <= leftpad(c,width)

def safe_int(i):
    try:
        return int(i)
    except (TypeError, ValueError) as e:
        return None

def safe_float(i):
    try:
        return float(i)
    except (TypeError, ValueError) as e:
        return None

def safe_str(i):
    try:
        return str(i)
    except (TypeError, ValueError) as e:
        return None


class MDF_Person_validator:
    @classmethod
    def is_valid_SCHEMA_TYPE_CODE(self,x):
        """Schema Type Code"""
        return (leftpad(x,5)==leftpad('MPD',5))
    @classmethod
    def is_valid_SCHEMA_BUILD_ID(self,x):
        """Schema Build ID"""
        return (leftpad(x,5)==leftpad('3.1.4',5))
    @classmethod
    def is_valid_TABBLKST(self,x):
        """2018 Tabulation State (FIPS)"""
        return (between('04',x,'06',2)) or (between('53',x,'56',2)) or (between('01',x,'02',2)) or (between('08',x,'13',2)) or (leftpad(x,2)==leftpad('72',2)) or (between('44',x,'51',2)) or (between('15',x,'42',2))
    @classmethod
    def is_valid_TABBLKCOU(self,x):
        """2018 Tabulation County (FIPS)"""
        return (between('001',x,'840',3))
    @classmethod
    def is_valid_TABTRACTCE(self,x):
        """2018 Tabulation Census Tract"""
        return (between('000100',x,'998999',6))
    @classmethod
    def is_valid_TABBLKGRPCE(self,x):
        """2018 Census Block Group"""
        return (between('0',x,'9',1))
    @classmethod
    def is_valid_TABBLK(self,x):
        """2018 Block Number"""
        return (between('0001',x,'9999',4))
    @classmethod
    def is_valid_EUID(self,x):
        """Privacy Edited Unit ID"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 999999999)
    @classmethod
    def is_valid_EPNUM(self,x):
        """Privacy Edited Person Number Note: For households, EPNUM = 1assigned to the householder(QREL = 01)"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 99999)
    @classmethod
    def is_valid_RTYPE(self,x):
        """Record Type"""
        return (leftpad(x,1)==leftpad('5',1)) or (leftpad(x,1)==leftpad('3',1))
    @classmethod
    def is_valid_QREL(self,x):
        """Edited Relationship"""
        return (leftpad(x,2)==leftpad('12',2)) or (leftpad(x,2)==leftpad('15',2)) or (leftpad(x,2)==leftpad('02',2)) or (leftpad(x,2)==leftpad('04',2)) or (leftpad(x,2)==leftpad('10',2)) or (leftpad(x,2)==leftpad('11',2)) or (leftpad(x,2)==leftpad('09',2)) or (leftpad(x,2)==leftpad('13',2)) or (leftpad(x,2)==leftpad('03',2)) or (leftpad(x,2)==leftpad('14',2)) or (leftpad(x,2)==leftpad('01',2)) or (leftpad(x,2)==leftpad('06',2)) or (leftpad(x,2)==leftpad('07',2)) or (leftpad(x,2)==leftpad('08',2)) or (leftpad(x,2)==leftpad('19',2)) or (leftpad(x,2)==leftpad('16',2)) or (leftpad(x,2)==leftpad('17',2)) or (leftpad(x,2)==leftpad('05',2)) or (leftpad(x,2)==leftpad('18',2)) or (leftpad(x,2)==leftpad('99',2))
    @classmethod
    def is_valid_QSEX(self,x):
        """Edited Sex"""
        return (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('2',1))
    @classmethod
    def is_valid_QAGE(self,x):
        """Edited Age Note: For 2018 End-to-End QAGE = 17 assigned to minors, and QAGE = 18 assigned to voting age persons"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 115)
    @classmethod
    def is_valid_CENHISP(self,x):
        """Hispanic Origin"""
        return (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('2',1))
    @classmethod
    def is_valid_CENRACE(self,x):
        """Census Race"""
        return (leftpad(x,2)==leftpad('43',2)) or (leftpad(x,2)==leftpad('40',2)) or (leftpad(x,2)==leftpad('50',2)) or (leftpad(x,2)==leftpad('04',2)) or (leftpad(x,2)==leftpad('10',2)) or (leftpad(x,2)==leftpad('11',2)) or (leftpad(x,2)==leftpad('13',2)) or (leftpad(x,2)==leftpad('20',2)) or (leftpad(x,2)==leftpad('28',2)) or (leftpad(x,2)==leftpad('25',2)) or (leftpad(x,2)==leftpad('31',2)) or (leftpad(x,2)==leftpad('01',2)) or (leftpad(x,2)==leftpad('37',2)) or (leftpad(x,2)==leftpad('39',2)) or (leftpad(x,2)==leftpad('41',2)) or (leftpad(x,2)==leftpad('42',2)) or (leftpad(x,2)==leftpad('46',2)) or (leftpad(x,2)==leftpad('23',2)) or (leftpad(x,2)==leftpad('53',2)) or (leftpad(x,2)==leftpad('44',2)) or (leftpad(x,2)==leftpad('49',2)) or (leftpad(x,2)==leftpad('62',2)) or (leftpad(x,2)==leftpad('09',2)) or (leftpad(x,2)==leftpad('17',2)) or (leftpad(x,2)==leftpad('47',2)) or (leftpad(x,2)==leftpad('48',2)) or (leftpad(x,2)==leftpad('51',2)) or (leftpad(x,2)==leftpad('30',2)) or (leftpad(x,2)==leftpad('12',2)) or (leftpad(x,2)==leftpad('15',2)) or (leftpad(x,2)==leftpad('35',2)) or (leftpad(x,2)==leftpad('59',2)) or (leftpad(x,2)==leftpad('63',2)) or (leftpad(x,2)==leftpad('07',2)) or (leftpad(x,2)==leftpad('21',2)) or (leftpad(x,2)==leftpad('22',2)) or (leftpad(x,2)==leftpad('57',2)) or (leftpad(x,2)==leftpad('56',2)) or (leftpad(x,2)==leftpad('61',2)) or (leftpad(x,2)==leftpad('52',2)) or (leftpad(x,2)==leftpad('24',2)) or (leftpad(x,2)==leftpad('58',2)) or (leftpad(x,2)==leftpad('02',2)) or (leftpad(x,2)==leftpad('14',2)) or (leftpad(x,2)==leftpad('19',2)) or (leftpad(x,2)==leftpad('26',2)) or (leftpad(x,2)==leftpad('29',2)) or (leftpad(x,2)==leftpad('38',2)) or (leftpad(x,2)==leftpad('03',2)) or (leftpad(x,2)==leftpad('27',2)) or (leftpad(x,2)==leftpad('06',2)) or (leftpad(x,2)==leftpad('08',2)) or (leftpad(x,2)==leftpad('33',2)) or (leftpad(x,2)==leftpad('34',2)) or (leftpad(x,2)==leftpad('36',2)) or (leftpad(x,2)==leftpad('45',2)) or (leftpad(x,2)==leftpad('16',2)) or (leftpad(x,2)==leftpad('32',2)) or (leftpad(x,2)==leftpad('54',2)) or (leftpad(x,2)==leftpad('55',2)) or (leftpad(x,2)==leftpad('05',2)) or (leftpad(x,2)==leftpad('60',2)) or (leftpad(x,2)==leftpad('18',2))
    @classmethod
    def is_valid_QSPANX(self,x):
        """Edited Hispanic Origin Group"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE1(self,x):
        """Edited Detailed Race 1"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE2(self,x):
        """Edited Detailed Race 2"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE3(self,x):
        """Edited Detailed Race 3"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE4(self,x):
        """Edited Detailed Race 4"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE5(self,x):
        """Edited Detailed Race 5"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE6(self,x):
        """Edited Detailed Race 6"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE7(self,x):
        """Edited Detailed Race 7"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_QRACE8(self,x):
        """Edited Detailed Race 8"""
        return (leftpad(x,4)==leftpad('9999',4))
    @classmethod
    def is_valid_CIT(self,x):
        """Citizenship"""
        return (leftpad(x,1)==leftpad('9',1))

    @classmethod
    def validate_pipe_delimited(self,x):
        fields = x.split('|')
        if len(fields)!=25: return False
        if is_valid_SCHEMA_TYPE_CODE(fields[1]) == False: return False
        if is_valid_SCHEMA_BUILD_ID(fields[2]) == False: return False
        if is_valid_TABBLKST(fields[3]) == False: return False
        if is_valid_TABBLKCOU(fields[4]) == False: return False
        if is_valid_TABTRACTCE(fields[5]) == False: return False
        if is_valid_TABBLKGRPCE(fields[6]) == False: return False
        if is_valid_TABBLK(fields[7]) == False: return False
        if is_valid_EUID(fields[8]) == False: return False
        if is_valid_EPNUM(fields[9]) == False: return False
        if is_valid_RTYPE(fields[10]) == False: return False
        if is_valid_QAGE(fields[13]) == False: return False
        if is_valid_CENHISP(fields[14]) == False: return False
        if is_valid_CENRACE(fields[15]) == False: return False
        return True

class MDF_Person:
    __slots__ = ['SCHEMA_TYPE_CODE', 'SCHEMA_BUILD_ID', 'TABBLKST', 'TABBLKCOU', 'TABTRACTCE', 'TABBLKGRPCE', 'TABBLK', 'EUID', 'EPNUM', 'RTYPE', 'QREL', 'QSEX', 'QAGE', 'CENHISP', 'CENRACE', 'QSPANX', 'QRACE1', 'QRACE2', 'QRACE3', 'QRACE4', 'QRACE5', 'QRACE6', 'QRACE7', 'QRACE8', 'CIT']
    def __repr__(self):
        return 'MDF_Person<SCHEMA_TYPE_CODE:{},SCHEMA_BUILD_ID:{},TABBLKST:{},TABBLKCOU:{},TABTRACTCE:{},TABBLKGRPCE:{},TABBLK:{},EUID:{},EPNUM:{},RTYPE:{},QREL:{},QSEX:{},QAGE:{},CENHISP:{},CENRACE:{},QSPANX:{},QRACE1:{},QRACE2:{},QRACE3:{},QRACE4:{},QRACE5:{},QRACE6:{},QRACE7:{},QRACE8:{},CIT:{}>'.format(self.SCHEMA_TYPE_CODE,self.SCHEMA_BUILD_ID,self.TABBLKST,self.TABBLKCOU,self.TABTRACTCE,self.TABBLKGRPCE,self.TABBLK,self.EUID,self.EPNUM,self.RTYPE,self.QREL,self.QSEX,self.QAGE,self.CENHISP,self.CENRACE,self.QSPANX,self.QRACE1,self.QRACE2,self.QRACE3,self.QRACE4,self.QRACE5,self.QRACE6,self.QRACE7,self.QRACE8,self.CIT)
    def __init__(self,line=None):
        if line: 
            if '|' in line: 
                self.parse_pipe_delimited(line)
            else:
                self.parse_position_specified(line)
    @classmethod
    def name(self):
        return 'MDF_Person'

    def parse_pipe_delimited(self,line):
        fields = line.split('|')
        if len(fields)!=25:
            raise ValueError(f'expected 25 fields, found {len(fields)}')
        self.SCHEMA_TYPE_CODE = fields[0]
        self.SCHEMA_BUILD_ID = fields[1]
        self.TABBLKST = fields[2]
        self.TABBLKCOU = fields[3]
        self.TABTRACTCE = fields[4]
        self.TABBLKGRPCE = fields[5]
        self.TABBLK = fields[6]
        self.EUID = fields[7]
        self.EPNUM = fields[8]
        self.RTYPE = fields[9]
        self.QAGE = fields[12]
        self.CENHISP = fields[13]
        self.CENRACE = fields[14]

    def parse_position_specified(self,line):
        self.SCHEMA_TYPE_CODE = None   # no column information for SCHEMA_TYPE_CODE
        self.SCHEMA_BUILD_ID = None   # no column information for SCHEMA_BUILD_ID
        self.TABBLKST = None   # no column information for TABBLKST
        self.TABBLKCOU = None   # no column information for TABBLKCOU
        self.TABTRACTCE = None   # no column information for TABTRACTCE
        self.TABBLKGRPCE = None   # no column information for TABBLKGRPCE
        self.TABBLK = None   # no column information for TABBLK
        self.EUID = None   # no column information for EUID
        self.EPNUM = None   # no column information for EPNUM
        self.RTYPE = None   # no column information for RTYPE
        self.QREL = None   # no column information for QREL
        self.QSEX = None   # no column information for QSEX
        self.QAGE = None   # no column information for QAGE
        self.CENHISP = None   # no column information for CENHISP
        self.CENRACE = None   # no column information for CENRACE
        self.QSPANX = None   # no column information for QSPANX
        self.QRACE1 = None   # no column information for QRACE1
        self.QRACE2 = None   # no column information for QRACE2
        self.QRACE3 = None   # no column information for QRACE3
        self.QRACE4 = None   # no column information for QRACE4
        self.QRACE5 = None   # no column information for QRACE5
        self.QRACE6 = None   # no column information for QRACE6
        self.QRACE7 = None   # no column information for QRACE7
        self.QRACE8 = None   # no column information for QRACE8
        self.CIT = None   # no column information for CIT

    def validate(self):
        """Return True if the object data validates"""
        if not MDF_Person_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): return False
        if not MDF_Person_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): return False
        if not MDF_Person_validator.is_valid_TABBLKST(self.TABBLKST): return False
        if not MDF_Person_validator.is_valid_TABBLKCOU(self.TABBLKCOU): return False
        if not MDF_Person_validator.is_valid_TABTRACTCE(self.TABTRACTCE): return False
        if not MDF_Person_validator.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): return False
        if not MDF_Person_validator.is_valid_TABBLK(self.TABBLK): return False
        if not MDF_Person_validator.is_valid_EUID(self.EUID): return False
        if not MDF_Person_validator.is_valid_EPNUM(self.EPNUM): return False
        if not MDF_Person_validator.is_valid_RTYPE(self.RTYPE): return False
        if not MDF_Person_validator.is_valid_QAGE(self.QAGE): return False
        if not MDF_Person_validator.is_valid_CENHISP(self.CENHISP): return False
        if not MDF_Person_validator.is_valid_CENRACE(self.CENRACE): return False
        return True

    def validate_reason(self):
        reason=[]
        if not MDF_Person_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): reason.append('SCHEMA_TYPE_CODE ('+str(self.SCHEMA_TYPE_CODE)+') out of range (MPD-MPD)')
        if not MDF_Person_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): reason.append('SCHEMA_BUILD_ID ('+str(self.SCHEMA_BUILD_ID)+') out of range (3.1.4-3.1.4)')
        if not MDF_Person_validator.is_valid_TABBLKST(self.TABBLKST): reason.append('TABBLKST ('+str(self.TABBLKST)+') out of range (04-06, 53-56, 01-02, 08-13, 72-72, 44-51, 15-42)')
        if not MDF_Person_validator.is_valid_TABBLKCOU(self.TABBLKCOU): reason.append('TABBLKCOU ('+str(self.TABBLKCOU)+') out of range (001-840)')
        if not MDF_Person_validator.is_valid_TABTRACTCE(self.TABTRACTCE): reason.append('TABTRACTCE ('+str(self.TABTRACTCE)+') out of range (000100-998999)')
        if not MDF_Person_validator.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): reason.append('TABBLKGRPCE ('+str(self.TABBLKGRPCE)+') out of range (0-9)')
        if not MDF_Person_validator.is_valid_TABBLK(self.TABBLK): reason.append('TABBLK ('+str(self.TABBLK)+') out of range (0001-9999)')
        if not MDF_Person_validator.is_valid_EUID(self.EUID): reason.append('EUID ('+str(self.EUID)+') out of range (0-999999999)')
        if not MDF_Person_validator.is_valid_EPNUM(self.EPNUM): reason.append('EPNUM ('+str(self.EPNUM)+') out of range (0-99999)')
        if not MDF_Person_validator.is_valid_RTYPE(self.RTYPE): reason.append('RTYPE ('+str(self.RTYPE)+') out of range (5-5, 3-3)')
        if not MDF_Person_validator.is_valid_QAGE(self.QAGE): reason.append('QAGE ('+str(self.QAGE)+') out of range (0-115)')
        if not MDF_Person_validator.is_valid_CENHISP(self.CENHISP): reason.append('CENHISP ('+str(self.CENHISP)+') out of range (1-1, 2-2)')
        if not MDF_Person_validator.is_valid_CENRACE(self.CENRACE): reason.append('CENRACE ('+str(self.CENRACE)+') out of range (43-43, 40-40, 50-50, 04-04, 10-10, 11-11, 13-13, 20-20, 28-28, 25-25, 31-31, 01-01, 37-37, 39-39, 41-41, 42-42, 46-46, 23-23, 53-53, 44-44, 49-49, 62-62, 09-09, 17-17, 47-47, 48-48, 51-51, 30-30, 12-12, 15-15, 35-35, 59-59, 63-63, 07-07, 21-21, 22-22, 57-57, 56-56, 61-61, 52-52, 24-24, 58-58, 02-02, 14-14, 19-19, 26-26, 29-29, 38-38, 03-03, 27-27, 06-06, 08-08, 33-33, 34-34, 36-36, 45-45, 16-16, 32-32, 54-54, 55-55, 05-05, 60-60, 18-18)')
        return ', '.join(reason)

    def SparkSQLRow(self):
        """Return a SparkSQL Row object for this object."""
        from pyspark.sql import Row
        return Row(
            schema_type_code=safe_str(self.SCHEMA_TYPE_CODE),
            schema_build_id=safe_str(self.SCHEMA_BUILD_ID),
            tabblkst=safe_str(self.TABBLKST),
            tabblkcou=safe_str(self.TABBLKCOU),
            tabtractce=safe_str(self.TABTRACTCE),
            tabblkgrpce=safe_str(self.TABBLKGRPCE),
            tabblk=safe_str(self.TABBLK),
            euid=safe_int(self.EUID),
            epnum=safe_int(self.EPNUM),
            rtype=safe_str(self.RTYPE),
            qage=safe_int(self.QAGE),
            cenhisp=safe_str(self.CENHISP),
            cenrace=safe_str(self.CENRACE),
        )




def leftpad(x,width):
    return ' '*(width-len(str(x)))+str(x)

def between(a,b,c,width):
    return leftpad(a,width) <= leftpad(b,width) <= leftpad(c,width)

def safe_int(i):
    try:
        return int(i)
    except (TypeError, ValueError) as e:
        return None

def safe_float(i):
    try:
        return float(i)
    except (TypeError, ValueError) as e:
        return None

def safe_str(i):
    try:
        return str(i)
    except (TypeError, ValueError) as e:
        return None


class MDF_Unit_validator:
    @classmethod
    def is_valid_SCHEMA_TYPE_CODE(self,x):
        """Schema Type Code"""
        return (leftpad(x,5)==leftpad('MUD',5))
    @classmethod
    def is_valid_SCHEMA_BUILD_ID(self,x):
        """Schema Build ID"""
        return (leftpad(x,5)==leftpad('3.1.4',5))
    @classmethod
    def is_valid_TABBLKST(self,x):
        """2018 Tabulation State (FIPS)"""
        return (between('04',x,'06',2)) or (between('53',x,'56',2)) or (between('01',x,'02',2)) or (between('08',x,'13',2)) or (leftpad(x,2)==leftpad('72',2)) or (between('44',x,'51',2)) or (between('15',x,'42',2))
    @classmethod
    def is_valid_TABBLKCOU(self,x):
        """2018 Tabulation County (FIPS)"""
        return (between('001',x,'840',3))
    @classmethod
    def is_valid_TABTRACTCE(self,x):
        """2018 Tabulation Census Tract"""
        return (between('000100',x,'998999',6))
    @classmethod
    def is_valid_TABBLKGRPCE(self,x):
        """2018 Census Block Group"""
        return (between('0',x,'9',1))
    @classmethod
    def is_valid_TABBLK(self,x):
        """2018 Block Number"""
        return (between('0001',x,'9999',4))
    @classmethod
    def is_valid_EUID(self,x):
        """Privacy Edited Unit ID"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 999999999)
    @classmethod
    def is_valid_RTYPE(self,x):
        """Record Type"""
        return (leftpad(x,1)==leftpad('2',1)) or (leftpad(x,1)==leftpad('4',1))
    @classmethod
    def is_valid_GQTYPE(self,x):
        """Group Quarters Type Note: For 2018 End-to-End, values will be assigned as follows: 000 = NIU 101 = 101..106 201 = 201..203 301 = 301 401 = 401..405 501 = 501..502 601 = 601..602 701 = 701..706, 801..802, 900..904"""
        return (leftpad(x,3)==leftpad('405',3)) or (leftpad(x,3)==leftpad('702',3)) or (leftpad(x,3)==leftpad('401',3)) or (leftpad(x,3)==leftpad('802',3)) or (leftpad(x,3)==leftpad('900',3)) or (leftpad(x,3)==leftpad('104',3)) or (leftpad(x,3)==leftpad('101',3)) or (leftpad(x,3)==leftpad('201',3)) or (leftpad(x,3)==leftpad('402',3)) or (leftpad(x,3)==leftpad('602',3)) or (leftpad(x,3)==leftpad('701',3)) or (leftpad(x,3)==leftpad('903',3)) or (leftpad(x,3)==leftpad('103',3)) or (leftpad(x,3)==leftpad('404',3)) or (leftpad(x,3)==leftpad('501',3)) or (leftpad(x,3)==leftpad('403',3)) or (leftpad(x,3)==leftpad('102',3)) or (leftpad(x,3)==leftpad('601',3)) or (leftpad(x,3)==leftpad('901',3)) or (leftpad(x,3)==leftpad('203',3)) or (leftpad(x,3)==leftpad('801',3)) or (leftpad(x,3)==leftpad('904',3)) or (leftpad(x,3)==leftpad('106',3)) or (leftpad(x,3)==leftpad('202',3)) or (leftpad(x,3)==leftpad('301',3)) or (leftpad(x,3)==leftpad('000',3)) or (leftpad(x,3)==leftpad('704',3)) or (leftpad(x,3)==leftpad('706',3)) or (leftpad(x,3)==leftpad('105',3)) or (leftpad(x,3)==leftpad('502',3))
    @classmethod
    def is_valid_TEN(self,x):
        """Tenure"""
        return (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('2',1)) or (leftpad(x,1)==leftpad('3',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('4',1))
    @classmethod
    def is_valid_VACS(self,x):
        """Vacancy Status"""
        return (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('6',1)) or (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('7',1)) or (leftpad(x,1)==leftpad('2',1)) or (leftpad(x,1)==leftpad('3',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('5',1)) or (leftpad(x,1)==leftpad('4',1))
    @classmethod
    def is_valid_FINAL_POP(self,x):
        """Population Count"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 99999)
    @classmethod
    def is_valid_HHT(self,x):
        """Household/Family Type"""
        return (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('6',1)) or (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('7',1)) or (leftpad(x,1)==leftpad('2',1)) or (leftpad(x,1)==leftpad('3',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('5',1)) or (leftpad(x,1)==leftpad('4',1))
    @classmethod
    def is_valid_HHT2(self,x):
        """Household/Family Type (NEW)"""
        return (leftpad(x,2)==leftpad('12',2)) or (leftpad(x,2)==leftpad('04',2)) or (leftpad(x,2)==leftpad('02',2)) or (leftpad(x,2)==leftpad('00',2)) or (leftpad(x,2)==leftpad('10',2)) or (leftpad(x,2)==leftpad('09',2)) or (leftpad(x,2)==leftpad('11',2)) or (leftpad(x,2)==leftpad('03',2)) or (leftpad(x,2)==leftpad('99',2)) or (leftpad(x,2)==leftpad('01',2)) or (leftpad(x,2)==leftpad('06',2)) or (leftpad(x,2)==leftpad('07',2)) or (leftpad(x,2)==leftpad('08',2)) or (leftpad(x,2)==leftpad('05',2))
    @classmethod
    def is_valid_NPF(self,x):
        """Number of People in Family"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (x==0) or (2 <= x <= 97) or (x==99)
    @classmethod
    def is_valid_CPLT(self,x):
        """Couple Type"""
        return (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('2',1)) or (leftpad(x,1)==leftpad('3',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('4',1))
    @classmethod
    def is_valid_UPART(self,x):
        """Presence and Type of Unmarried Partner Household"""
        return (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('2',1)) or (leftpad(x,1)==leftpad('3',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('5',1)) or (leftpad(x,1)==leftpad('4',1))
    @classmethod
    def is_valid_MULTG(self,x):
        """Multigenerational Household"""
        return (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('2',1))
    @classmethod
    def is_valid_HHLDRAGE(self,x):
        """Age of Householder"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (x==0) or (15 <= x <= 115) or (x==999)
    @classmethod
    def is_valid_HHSPAN(self,x):
        """Hispanic Householder"""
        return (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('2',1))
    @classmethod
    def is_valid_HHRACE(self,x):
        """Race of Householder"""
        return (leftpad(x,2)==leftpad('43',2)) or (leftpad(x,2)==leftpad('40',2)) or (leftpad(x,2)==leftpad('50',2)) or (leftpad(x,2)==leftpad('04',2)) or (leftpad(x,2)==leftpad('00',2)) or (leftpad(x,2)==leftpad('10',2)) or (leftpad(x,2)==leftpad('11',2)) or (leftpad(x,2)==leftpad('13',2)) or (leftpad(x,2)==leftpad('20',2)) or (leftpad(x,2)==leftpad('25',2)) or (leftpad(x,2)==leftpad('28',2)) or (leftpad(x,2)==leftpad('01',2)) or (leftpad(x,2)==leftpad('31',2)) or (leftpad(x,2)==leftpad('39',2)) or (leftpad(x,2)==leftpad('41',2)) or (leftpad(x,2)==leftpad('42',2)) or (leftpad(x,2)==leftpad('46',2)) or (leftpad(x,2)==leftpad('23',2)) or (leftpad(x,2)==leftpad('53',2)) or (leftpad(x,2)==leftpad('44',2)) or (leftpad(x,2)==leftpad('49',2)) or (leftpad(x,2)==leftpad('62',2)) or (leftpad(x,2)==leftpad('09',2)) or (leftpad(x,2)==leftpad('17',2)) or (leftpad(x,2)==leftpad('47',2)) or (leftpad(x,2)==leftpad('48',2)) or (leftpad(x,2)==leftpad('51',2)) or (leftpad(x,2)==leftpad('30',2)) or (leftpad(x,2)==leftpad('99',2)) or (leftpad(x,2)==leftpad('12',2)) or (leftpad(x,2)==leftpad('15',2)) or (leftpad(x,2)==leftpad('35',2)) or (leftpad(x,2)==leftpad('59',2)) or (leftpad(x,2)==leftpad('63',2)) or (leftpad(x,2)==leftpad('07',2)) or (leftpad(x,2)==leftpad('21',2)) or (leftpad(x,2)==leftpad('22',2)) or (leftpad(x,2)==leftpad('57',2)) or (leftpad(x,2)==leftpad('56',2)) or (leftpad(x,2)==leftpad('61',2)) or (leftpad(x,2)==leftpad('52',2)) or (leftpad(x,2)==leftpad('24',2)) or (leftpad(x,2)==leftpad('37',2)) or (leftpad(x,2)==leftpad('58',2)) or (leftpad(x,2)==leftpad('02',2)) or (leftpad(x,2)==leftpad('19',2)) or (leftpad(x,2)==leftpad('14',2)) or (leftpad(x,2)==leftpad('26',2)) or (leftpad(x,2)==leftpad('29',2)) or (leftpad(x,2)==leftpad('38',2)) or (leftpad(x,2)==leftpad('03',2)) or (leftpad(x,2)==leftpad('27',2)) or (leftpad(x,2)==leftpad('06',2)) or (leftpad(x,2)==leftpad('08',2)) or (leftpad(x,2)==leftpad('33',2)) or (leftpad(x,2)==leftpad('34',2)) or (leftpad(x,2)==leftpad('36',2)) or (leftpad(x,2)==leftpad('45',2)) or (leftpad(x,2)==leftpad('16',2)) or (leftpad(x,2)==leftpad('32',2)) or (leftpad(x,2)==leftpad('54',2)) or (leftpad(x,2)==leftpad('55',2)) or (leftpad(x,2)==leftpad('05',2)) or (leftpad(x,2)==leftpad('60',2)) or (leftpad(x,2)==leftpad('18',2))
    @classmethod
    def is_valid_PAOC(self,x):
        """Presence and Age of Own Children Under 18"""
        return (leftpad(x,1)==leftpad('9',1)) or (leftpad(x,1)==leftpad('1',1)) or (leftpad(x,1)==leftpad('2',1)) or (leftpad(x,1)==leftpad('3',1)) or (leftpad(x,1)==leftpad('0',1)) or (leftpad(x,1)==leftpad('4',1))
    @classmethod
    def is_valid_P18(self,x):
        """Number of People Under 18 Years in Household"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 97) or (x==99)
    @classmethod
    def is_valid_P60(self,x):
        """Number of People 60 Years and Over in Household"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 97) or (x==99)
    @classmethod
    def is_valid_P65(self,x):
        """Number of People 65 Years and Over in Household"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 97) or (x==99)
    @classmethod
    def is_valid_P75(self,x):
        """Number of People 75 Years and Over in Household"""
        x = str(x).strip()
        try:
            x = int(x)
        except ValueError:
            return False
        return (0 <= x <= 97) or (x==99)

    @classmethod
    def validate_pipe_delimited(self,x):
        fields = x.split('|')
        if len(fields)!=27: return False
        if is_valid_SCHEMA_TYPE_CODE(fields[1]) == False: return False
        if is_valid_SCHEMA_BUILD_ID(fields[2]) == False: return False
        if is_valid_TABBLKST(fields[3]) == False: return False
        if is_valid_TABBLKCOU(fields[4]) == False: return False
        if is_valid_TABTRACTCE(fields[5]) == False: return False
        if is_valid_TABBLKGRPCE(fields[6]) == False: return False
        if is_valid_TABBLK(fields[7]) == False: return False
        if is_valid_EUID(fields[8]) == False: return False
        if is_valid_RTYPE(fields[9]) == False: return False
        if is_valid_GQTYPE(fields[10]) == False: return False
        if is_valid_TEN(fields[11]) == False: return False
        if is_valid_VACS(fields[12]) == False: return False
        if is_valid_FINAL_POP(fields[13]) == False: return False
        return True

class MDF_Unit:
    __slots__ = ['SCHEMA_TYPE_CODE', 'SCHEMA_BUILD_ID', 'TABBLKST', 'TABBLKCOU', 'TABTRACTCE', 'TABBLKGRPCE', 'TABBLK', 'EUID', 'RTYPE', 'GQTYPE', 'TEN', 'VACS', 'FINAL_POP', 'HHT', 'HHT2', 'NPF', 'CPLT', 'UPART', 'MULTG', 'HHLDRAGE', 'HHSPAN', 'HHRACE', 'PAOC', 'P18', 'P60', 'P65', 'P75']
    def __repr__(self):
        return 'MDF_Unit<SCHEMA_TYPE_CODE:{},SCHEMA_BUILD_ID:{},TABBLKST:{},TABBLKCOU:{},TABTRACTCE:{},TABBLKGRPCE:{},TABBLK:{},EUID:{},RTYPE:{},GQTYPE:{},TEN:{},VACS:{},FINAL_POP:{},HHT:{},HHT2:{},NPF:{},CPLT:{},UPART:{},MULTG:{},HHLDRAGE:{},HHSPAN:{},HHRACE:{},PAOC:{},P18:{},P60:{},P65:{},P75:{}>'.format(self.SCHEMA_TYPE_CODE,self.SCHEMA_BUILD_ID,self.TABBLKST,self.TABBLKCOU,self.TABTRACTCE,self.TABBLKGRPCE,self.TABBLK,self.EUID,self.RTYPE,self.GQTYPE,self.TEN,self.VACS,self.FINAL_POP,self.HHT,self.HHT2,self.NPF,self.CPLT,self.UPART,self.MULTG,self.HHLDRAGE,self.HHSPAN,self.HHRACE,self.PAOC,self.P18,self.P60,self.P65,self.P75)
    def __init__(self,line=None):
        if line: 
            if '|' in line: 
                self.parse_pipe_delimited(line)
            else:
                self.parse_position_specified(line)
    @classmethod
    def name(self):
        return 'MDF_Unit'

    def parse_pipe_delimited(self,line):
        fields = line.split('|')
        if len(fields)!=27:
            raise ValueError(f'expected 27 fields, found {len(fields)}')
        self.SCHEMA_TYPE_CODE = fields[0]
        self.SCHEMA_BUILD_ID = fields[1]
        self.TABBLKST = fields[2]
        self.TABBLKCOU = fields[3]
        self.TABTRACTCE = fields[4]
        self.TABBLKGRPCE = fields[5]
        self.TABBLK = fields[6]
        self.EUID = fields[7]
        self.RTYPE = fields[8]
        self.GQTYPE = fields[9]
        self.TEN = fields[10]
        self.VACS = fields[11]
        self.FINAL_POP = fields[12]

    def parse_position_specified(self,line):
        self.SCHEMA_TYPE_CODE = None   # no column information for SCHEMA_TYPE_CODE
        self.SCHEMA_BUILD_ID = None   # no column information for SCHEMA_BUILD_ID
        self.TABBLKST = None   # no column information for TABBLKST
        self.TABBLKCOU = None   # no column information for TABBLKCOU
        self.TABTRACTCE = None   # no column information for TABTRACTCE
        self.TABBLKGRPCE = None   # no column information for TABBLKGRPCE
        self.TABBLK = None   # no column information for TABBLK
        self.EUID = None   # no column information for EUID
        self.RTYPE = None   # no column information for RTYPE
        self.GQTYPE = None   # no column information for GQTYPE
        self.TEN = None   # no column information for TEN
        self.VACS = None   # no column information for VACS
        self.FINAL_POP = None   # no column information for FINAL_POP
        self.HHT = None   # no column information for HHT
        self.HHT2 = None   # no column information for HHT2
        self.NPF = None   # no column information for NPF
        self.CPLT = None   # no column information for CPLT
        self.UPART = None   # no column information for UPART
        self.MULTG = None   # no column information for MULTG
        self.HHLDRAGE = None   # no column information for HHLDRAGE
        self.HHSPAN = None   # no column information for HHSPAN
        self.HHRACE = None   # no column information for HHRACE
        self.PAOC = None   # no column information for PAOC
        self.P18 = None   # no column information for P18
        self.P60 = None   # no column information for P60
        self.P65 = None   # no column information for P65
        self.P75 = None   # no column information for P75

    def validate(self):
        """Return True if the object data validates"""
        if not MDF_Unit_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): return False
        if not MDF_Unit_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): return False
        if not MDF_Unit_validator.is_valid_TABBLKST(self.TABBLKST): return False
        if not MDF_Unit_validator.is_valid_TABBLKCOU(self.TABBLKCOU): return False
        if not MDF_Unit_validator.is_valid_TABTRACTCE(self.TABTRACTCE): return False
        if not MDF_Unit_validator.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): return False
        if not MDF_Unit_validator.is_valid_TABBLK(self.TABBLK): return False
        if not MDF_Unit_validator.is_valid_EUID(self.EUID): return False
        if not MDF_Unit_validator.is_valid_RTYPE(self.RTYPE): return False
        if not MDF_Unit_validator.is_valid_GQTYPE(self.GQTYPE): return False
        if not MDF_Unit_validator.is_valid_TEN(self.TEN): return False
        if not MDF_Unit_validator.is_valid_VACS(self.VACS): return False
        if not MDF_Unit_validator.is_valid_FINAL_POP(self.FINAL_POP): return False
        return True

    def validate_reason(self):
        reason=[]
        if not MDF_Unit_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): reason.append('SCHEMA_TYPE_CODE ('+str(self.SCHEMA_TYPE_CODE)+') out of range (MUD-MUD)')
        if not MDF_Unit_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): reason.append('SCHEMA_BUILD_ID ('+str(self.SCHEMA_BUILD_ID)+') out of range (3.1.4-3.1.4)')
        if not MDF_Unit_validator.is_valid_TABBLKST(self.TABBLKST): reason.append('TABBLKST ('+str(self.TABBLKST)+') out of range (04-06, 53-56, 01-02, 08-13, 72-72, 44-51, 15-42)')
        if not MDF_Unit_validator.is_valid_TABBLKCOU(self.TABBLKCOU): reason.append('TABBLKCOU ('+str(self.TABBLKCOU)+') out of range (001-840)')
        if not MDF_Unit_validator.is_valid_TABTRACTCE(self.TABTRACTCE): reason.append('TABTRACTCE ('+str(self.TABTRACTCE)+') out of range (000100-998999)')
        if not MDF_Unit_validator.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): reason.append('TABBLKGRPCE ('+str(self.TABBLKGRPCE)+') out of range (0-9)')
        if not MDF_Unit_validator.is_valid_TABBLK(self.TABBLK): reason.append('TABBLK ('+str(self.TABBLK)+') out of range (0001-9999)')
        if not MDF_Unit_validator.is_valid_EUID(self.EUID): reason.append('EUID ('+str(self.EUID)+') out of range (0-999999999)')
        if not MDF_Unit_validator.is_valid_RTYPE(self.RTYPE): reason.append('RTYPE ('+str(self.RTYPE)+') out of range (2-2, 4-4)')
        if not MDF_Unit_validator.is_valid_GQTYPE(self.GQTYPE): reason.append('GQTYPE ('+str(self.GQTYPE)+') out of range (405-405, 702-702, 401-401, 802-802, 900-900, 104-104, 101-101, 201-201, 402-402, 602-602, 701-701, 903-903, 103-103, 404-404, 501-501, 403-403, 102-102, 601-601, 901-901, 203-203, 801-801, 904-904, 106-106, 202-202, 301-301, 000-000, 704-704, 706-706, 105-105, 502-502)')
        if not MDF_Unit_validator.is_valid_TEN(self.TEN): reason.append('TEN ('+str(self.TEN)+') out of range (9-9, 1-1, 2-2, 3-3, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_VACS(self.VACS): reason.append('VACS ('+str(self.VACS)+') out of range (9-9, 6-6, 1-1, 7-7, 2-2, 3-3, 0-0, 5-5, 4-4)')
        if not MDF_Unit_validator.is_valid_FINAL_POP(self.FINAL_POP): reason.append('FINAL_POP ('+str(self.FINAL_POP)+') out of range (0-99999)')
        return ', '.join(reason)

    def SparkSQLRow(self):
        """Return a SparkSQL Row object for this object."""
        from pyspark.sql import Row
        return Row(
            schema_type_code=safe_str(self.SCHEMA_TYPE_CODE),
            schema_build_id=safe_str(self.SCHEMA_BUILD_ID),
            tabblkst=safe_str(self.TABBLKST),
            tabblkcou=safe_str(self.TABBLKCOU),
            tabtractce=safe_str(self.TABTRACTCE),
            tabblkgrpce=safe_str(self.TABBLKGRPCE),
            tabblk=safe_str(self.TABBLK),
            euid=safe_int(self.EUID),
            rtype=safe_str(self.RTYPE),
            gqtype=safe_str(self.GQTYPE),
            ten=safe_str(self.TEN),
            vacs=safe_str(self.VACS),
            final_pop=safe_int(self.FINAL_POP),
        )



SPEC_CLASS_OBJECTS = [MDF_Person(),MDF_Unit()]
null = None
SPEC_DICT = {"tables": {"MDF_Person": {"name": "MDF_Person", "variables": [{"name": "SCHEMA_TYPE_CODE", "vtype": "CHAR", "position": "1", "desc": "Schema Type Code", "column": null, "width": 5, "ranges": [{"a": "MPD", "b": "MPD"}]}, {"name": "SCHEMA_BUILD_ID", "vtype": "CHAR", "position": "2", "desc": "Schema Build ID", "column": null, "width": 5, "ranges": [{"a": "3.1.4", "b": "3.1.4"}]}, {"name": "TABBLKST", "vtype": "CHAR", "position": "3", "desc": "2018 Tabulation State (FIPS)", "column": null, "width": 2, "ranges": [{"a": "04", "b": "06"}, {"a": "53", "b": "56"}, {"a": "01", "b": "02"}, {"a": "08", "b": "13"}, {"a": "72", "b": "72"}, {"a": "44", "b": "51"}, {"a": "15", "b": "42"}]}, {"name": "TABBLKCOU", "vtype": "CHAR", "position": "4", "desc": "2018 Tabulation County (FIPS)", "column": null, "width": 3, "ranges": [{"a": "001", "b": "840"}]}, {"name": "TABTRACTCE", "vtype": "CHAR", "position": "5", "desc": "2018 Tabulation Census Tract", "column": null, "width": 6, "ranges": [{"a": "000100", "b": "998999"}]}, {"name": "TABBLKGRPCE", "vtype": "CHAR", "position": "6", "desc": "2018 Census Block Group", "column": null, "width": 1, "ranges": [{"a": "0", "b": "9"}]}, {"name": "TABBLK", "vtype": "CHAR", "position": "7", "desc": "2018 Block Number", "column": null, "width": 4, "ranges": [{"a": "0001", "b": "9999"}]}, {"name": "EUID", "vtype": "INT", "position": "8", "desc": "Privacy Edited Unit ID", "column": null, "width": 9, "ranges": [{"a": 0, "b": 999999999}]}, {"name": "EPNUM", "vtype": "INT", "position": "9", "desc": "Privacy Edited Person Number Note: For households, EPNUM = 1assigned to the householder(QREL = 01)", "column": null, "width": 5, "ranges": [{"a": 0, "b": 99999}]}, {"name": "RTYPE", "vtype": "CHAR", "position": "10", "desc": "Record Type", "column": null, "width": 1, "ranges": [{"a": "5", "b": "5"}, {"a": "3", "b": "3"}]}, {"name": "QREL", "vtype": "CHAR", "position": "11", "desc": "Edited Relationship", "column": null, "width": 2, "ranges": [{"a": "12", "b": "12"}, {"a": "15", "b": "15"}, {"a": "02", "b": "02"}, {"a": "04", "b": "04"}, {"a": "10", "b": "10"}, {"a": "11", "b": "11"}, {"a": "09", "b": "09"}, {"a": "13", "b": "13"}, {"a": "03", "b": "03"}, {"a": "14", "b": "14"}, {"a": "01", "b": "01"}, {"a": "06", "b": "06"}, {"a": "07", "b": "07"}, {"a": "08", "b": "08"}, {"a": "19", "b": "19"}, {"a": "16", "b": "16"}, {"a": "17", "b": "17"}, {"a": "05", "b": "05"}, {"a": "18", "b": "18"}, {"a": "99", "b": "99"}]}, {"name": "QSEX", "vtype": "CHAR", "position": "12", "desc": "Edited Sex", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}, {"a": "1", "b": "1"}, {"a": "2", "b": "2"}]}, {"name": "QAGE", "vtype": "INT", "position": "13", "desc": "Edited Age Note: For 2018 End-to-End QAGE = 17 assigned to minors, and QAGE = 18 assigned to voting age persons", "column": null, "width": 3, "ranges": [{"a": 0, "b": 115}]}, {"name": "CENHISP", "vtype": "CHAR", "position": "14", "desc": "Hispanic Origin", "column": null, "width": 1, "ranges": [{"a": "1", "b": "1"}, {"a": "2", "b": "2"}]}, {"name": "CENRACE", "vtype": "CHAR", "position": "15", "desc": "Census Race", "column": null, "width": 2, "ranges": [{"a": "43", "b": "43"}, {"a": "40", "b": "40"}, {"a": "50", "b": "50"}, {"a": "04", "b": "04"}, {"a": "10", "b": "10"}, {"a": "11", "b": "11"}, {"a": "13", "b": "13"}, {"a": "20", "b": "20"}, {"a": "28", "b": "28"}, {"a": "25", "b": "25"}, {"a": "31", "b": "31"}, {"a": "01", "b": "01"}, {"a": "37", "b": "37"}, {"a": "39", "b": "39"}, {"a": "41", "b": "41"}, {"a": "42", "b": "42"}, {"a": "46", "b": "46"}, {"a": "23", "b": "23"}, {"a": "53", "b": "53"}, {"a": "44", "b": "44"}, {"a": "49", "b": "49"}, {"a": "62", "b": "62"}, {"a": "09", "b": "09"}, {"a": "17", "b": "17"}, {"a": "47", "b": "47"}, {"a": "48", "b": "48"}, {"a": "51", "b": "51"}, {"a": "30", "b": "30"}, {"a": "12", "b": "12"}, {"a": "15", "b": "15"}, {"a": "35", "b": "35"}, {"a": "59", "b": "59"}, {"a": "63", "b": "63"}, {"a": "07", "b": "07"}, {"a": "21", "b": "21"}, {"a": "22", "b": "22"}, {"a": "57", "b": "57"}, {"a": "56", "b": "56"}, {"a": "61", "b": "61"}, {"a": "52", "b": "52"}, {"a": "24", "b": "24"}, {"a": "58", "b": "58"}, {"a": "02", "b": "02"}, {"a": "14", "b": "14"}, {"a": "19", "b": "19"}, {"a": "26", "b": "26"}, {"a": "29", "b": "29"}, {"a": "38", "b": "38"}, {"a": "03", "b": "03"}, {"a": "27", "b": "27"}, {"a": "06", "b": "06"}, {"a": "08", "b": "08"}, {"a": "33", "b": "33"}, {"a": "34", "b": "34"}, {"a": "36", "b": "36"}, {"a": "45", "b": "45"}, {"a": "16", "b": "16"}, {"a": "32", "b": "32"}, {"a": "54", "b": "54"}, {"a": "55", "b": "55"}, {"a": "05", "b": "05"}, {"a": "60", "b": "60"}, {"a": "18", "b": "18"}]}, {"name": "QSPANX", "vtype": "CHAR", "position": "16", "desc": "Edited Hispanic Origin Group", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE1", "vtype": "CHAR", "position": "17", "desc": "Edited Detailed Race 1", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE2", "vtype": "CHAR", "position": "18", "desc": "Edited Detailed Race 2", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE3", "vtype": "CHAR", "position": "19", "desc": "Edited Detailed Race 3", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE4", "vtype": "CHAR", "position": "20", "desc": "Edited Detailed Race 4", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE5", "vtype": "CHAR", "position": "21", "desc": "Edited Detailed Race 5", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE6", "vtype": "CHAR", "position": "22", "desc": "Edited Detailed Race 6", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE7", "vtype": "CHAR", "position": "23", "desc": "Edited Detailed Race 7", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "QRACE8", "vtype": "CHAR", "position": "24", "desc": "Edited Detailed Race 8", "column": null, "width": 4, "ranges": [{"a": "9999", "b": "9999"}]}, {"name": "CIT", "vtype": "CHAR", "position": "25", "desc": "Citizenship", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}]}]}, "MDF_Unit": {"name": "MDF_Unit", "variables": [{"name": "SCHEMA_TYPE_CODE", "vtype": "CHAR", "position": "1", "desc": "Schema Type Code", "column": null, "width": 5, "ranges": [{"a": "MUD", "b": "MUD"}]}, {"name": "SCHEMA_BUILD_ID", "vtype": "CHAR", "position": "2", "desc": "Schema Build ID", "column": null, "width": 5, "ranges": [{"a": "3.1.4", "b": "3.1.4"}]}, {"name": "TABBLKST", "vtype": "CHAR", "position": "3", "desc": "2018 Tabulation State (FIPS)", "column": null, "width": 2, "ranges": [{"a": "04", "b": "06"}, {"a": "53", "b": "56"}, {"a": "01", "b": "02"}, {"a": "08", "b": "13"}, {"a": "72", "b": "72"}, {"a": "44", "b": "51"}, {"a": "15", "b": "42"}]}, {"name": "TABBLKCOU", "vtype": "CHAR", "position": "4", "desc": "2018 Tabulation County (FIPS)", "column": null, "width": 3, "ranges": [{"a": "001", "b": "840"}]}, {"name": "TABTRACTCE", "vtype": "CHAR", "position": "5", "desc": "2018 Tabulation Census Tract", "column": null, "width": 6, "ranges": [{"a": "000100", "b": "998999"}]}, {"name": "TABBLKGRPCE", "vtype": "CHAR", "position": "6", "desc": "2018 Census Block Group", "column": null, "width": 1, "ranges": [{"a": "0", "b": "9"}]}, {"name": "TABBLK", "vtype": "CHAR", "position": "7", "desc": "2018 Block Number", "column": null, "width": 4, "ranges": [{"a": "0001", "b": "9999"}]}, {"name": "EUID", "vtype": "INT", "position": "8", "desc": "Privacy Edited Unit ID", "column": null, "width": 9, "ranges": [{"a": 0, "b": 999999999}]}, {"name": "RTYPE", "vtype": "CHAR", "position": "9", "desc": "Record Type", "column": null, "width": 1, "ranges": [{"a": "2", "b": "2"}, {"a": "4", "b": "4"}]}, {"name": "GQTYPE", "vtype": "CHAR", "position": "10", "desc": "Group Quarters Type Note: For 2018 End-to-End, values will be assigned as follows: 000 = NIU 101 = 101..106 201 = 201..203 301 = 301 401 = 401..405 501 = 501..502 601 = 601..602 701 = 701..706, 801..802, 900..904", "column": null, "width": 3, "ranges": [{"a": "405", "b": "405"}, {"a": "702", "b": "702"}, {"a": "401", "b": "401"}, {"a": "802", "b": "802"}, {"a": "900", "b": "900"}, {"a": "104", "b": "104"}, {"a": "101", "b": "101"}, {"a": "201", "b": "201"}, {"a": "402", "b": "402"}, {"a": "602", "b": "602"}, {"a": "701", "b": "701"}, {"a": "903", "b": "903"}, {"a": "103", "b": "103"}, {"a": "404", "b": "404"}, {"a": "501", "b": "501"}, {"a": "403", "b": "403"}, {"a": "102", "b": "102"}, {"a": "601", "b": "601"}, {"a": "901", "b": "901"}, {"a": "203", "b": "203"}, {"a": "801", "b": "801"}, {"a": "904", "b": "904"}, {"a": "106", "b": "106"}, {"a": "202", "b": "202"}, {"a": "301", "b": "301"}, {"a": "000", "b": "000"}, {"a": "704", "b": "704"}, {"a": "706", "b": "706"}, {"a": "105", "b": "105"}, {"a": "502", "b": "502"}]}, {"name": "TEN", "vtype": "CHAR", "position": "11", "desc": "Tenure", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}, {"a": "1", "b": "1"}, {"a": "2", "b": "2"}, {"a": "3", "b": "3"}, {"a": "0", "b": "0"}, {"a": "4", "b": "4"}]}, {"name": "VACS", "vtype": "CHAR", "position": "12", "desc": "Vacancy Status", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}, {"a": "6", "b": "6"}, {"a": "1", "b": "1"}, {"a": "7", "b": "7"}, {"a": "2", "b": "2"}, {"a": "3", "b": "3"}, {"a": "0", "b": "0"}, {"a": "5", "b": "5"}, {"a": "4", "b": "4"}]}, {"name": "FINAL_POP", "vtype": "INT", "position": "13", "desc": "Population Count", "column": null, "width": 5, "ranges": [{"a": 0, "b": 99999}]}, {"name": "HHT", "vtype": "CHAR", "position": "14", "desc": "Household/Family Type", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}, {"a": "6", "b": "6"}, {"a": "1", "b": "1"}, {"a": "7", "b": "7"}, {"a": "2", "b": "2"}, {"a": "3", "b": "3"}, {"a": "0", "b": "0"}, {"a": "5", "b": "5"}, {"a": "4", "b": "4"}]}, {"name": "HHT2", "vtype": "CHAR", "position": "15", "desc": "Household/Family Type (NEW)", "column": null, "width": 2, "ranges": [{"a": "12", "b": "12"}, {"a": "04", "b": "04"}, {"a": "02", "b": "02"}, {"a": "00", "b": "00"}, {"a": "10", "b": "10"}, {"a": "09", "b": "09"}, {"a": "11", "b": "11"}, {"a": "03", "b": "03"}, {"a": "99", "b": "99"}, {"a": "01", "b": "01"}, {"a": "06", "b": "06"}, {"a": "07", "b": "07"}, {"a": "08", "b": "08"}, {"a": "05", "b": "05"}]}, {"name": "NPF", "vtype": "INT", "position": "16", "desc": "Number of People in Family", "column": null, "width": 2, "ranges": [{"a": 0, "b": 0}, {"a": 99, "b": 99}, {"a": 2, "b": 97}]}, {"name": "CPLT", "vtype": "CHAR", "position": "17", "desc": "Couple Type", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}, {"a": "1", "b": "1"}, {"a": "2", "b": "2"}, {"a": "3", "b": "3"}, {"a": "0", "b": "0"}, {"a": "4", "b": "4"}]}, {"name": "UPART", "vtype": "CHAR", "position": "18", "desc": "Presence and Type of Unmarried Partner Household", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}, {"a": "1", "b": "1"}, {"a": "2", "b": "2"}, {"a": "3", "b": "3"}, {"a": "0", "b": "0"}, {"a": "5", "b": "5"}, {"a": "4", "b": "4"}]}, {"name": "MULTG", "vtype": "CHAR", "position": "19", "desc": "Multigenerational Household", "column": null, "width": 1, "ranges": [{"a": "1", "b": "1"}, {"a": "9", "b": "9"}, {"a": "0", "b": "0"}, {"a": "2", "b": "2"}]}, {"name": "HHLDRAGE", "vtype": "INT", "position": "20", "desc": "Age of Householder", "column": null, "width": 3, "ranges": [{"a": 15, "b": 115}, {"a": 0, "b": 0}, {"a": 999, "b": 999}]}, {"name": "HHSPAN", "vtype": "CHAR", "position": "21", "desc": "Hispanic Householder", "column": null, "width": 1, "ranges": [{"a": "1", "b": "1"}, {"a": "9", "b": "9"}, {"a": "0", "b": "0"}, {"a": "2", "b": "2"}]}, {"name": "HHRACE", "vtype": "CHAR", "position": "22", "desc": "Race of Householder", "column": null, "width": 2, "ranges": [{"a": "43", "b": "43"}, {"a": "40", "b": "40"}, {"a": "50", "b": "50"}, {"a": "04", "b": "04"}, {"a": "00", "b": "00"}, {"a": "10", "b": "10"}, {"a": "11", "b": "11"}, {"a": "13", "b": "13"}, {"a": "20", "b": "20"}, {"a": "25", "b": "25"}, {"a": "28", "b": "28"}, {"a": "01", "b": "01"}, {"a": "31", "b": "31"}, {"a": "39", "b": "39"}, {"a": "41", "b": "41"}, {"a": "42", "b": "42"}, {"a": "46", "b": "46"}, {"a": "23", "b": "23"}, {"a": "53", "b": "53"}, {"a": "44", "b": "44"}, {"a": "49", "b": "49"}, {"a": "62", "b": "62"}, {"a": "09", "b": "09"}, {"a": "17", "b": "17"}, {"a": "47", "b": "47"}, {"a": "48", "b": "48"}, {"a": "51", "b": "51"}, {"a": "30", "b": "30"}, {"a": "99", "b": "99"}, {"a": "12", "b": "12"}, {"a": "15", "b": "15"}, {"a": "35", "b": "35"}, {"a": "59", "b": "59"}, {"a": "63", "b": "63"}, {"a": "07", "b": "07"}, {"a": "21", "b": "21"}, {"a": "22", "b": "22"}, {"a": "57", "b": "57"}, {"a": "56", "b": "56"}, {"a": "61", "b": "61"}, {"a": "52", "b": "52"}, {"a": "24", "b": "24"}, {"a": "37", "b": "37"}, {"a": "58", "b": "58"}, {"a": "02", "b": "02"}, {"a": "19", "b": "19"}, {"a": "14", "b": "14"}, {"a": "26", "b": "26"}, {"a": "29", "b": "29"}, {"a": "38", "b": "38"}, {"a": "03", "b": "03"}, {"a": "27", "b": "27"}, {"a": "06", "b": "06"}, {"a": "08", "b": "08"}, {"a": "33", "b": "33"}, {"a": "34", "b": "34"}, {"a": "36", "b": "36"}, {"a": "45", "b": "45"}, {"a": "16", "b": "16"}, {"a": "32", "b": "32"}, {"a": "54", "b": "54"}, {"a": "55", "b": "55"}, {"a": "05", "b": "05"}, {"a": "60", "b": "60"}, {"a": "18", "b": "18"}]}, {"name": "PAOC", "vtype": "CHAR", "position": "23", "desc": "Presence and Age of Own Children Under 18", "column": null, "width": 1, "ranges": [{"a": "9", "b": "9"}, {"a": "1", "b": "1"}, {"a": "2", "b": "2"}, {"a": "3", "b": "3"}, {"a": "0", "b": "0"}, {"a": "4", "b": "4"}]}, {"name": "P18", "vtype": "INT", "position": "24", "desc": "Number of People Under 18 Years in Household", "column": null, "width": 2, "ranges": [{"a": 99, "b": 99}, {"a": 0, "b": 0}, {"a": 1, "b": 97}]}, {"name": "P60", "vtype": "INT", "position": "25", "desc": "Number of People 60 Years and Over in Household", "column": null, "width": 2, "ranges": [{"a": 99, "b": 99}, {"a": 0, "b": 0}, {"a": 1, "b": 97}]}, {"name": "P65", "vtype": "INT", "position": "26", "desc": "Number of People 65 Years and Over in Household", "column": null, "width": 2, "ranges": [{"a": 99, "b": 99}, {"a": 0, "b": 0}, {"a": 1, "b": 97}]}, {"name": "P75", "vtype": "INT", "position": "27", "desc": "Number of People 75 Years and Over in Household", "column": null, "width": 2, "ranges": [{"a": 99, "b": 99}, {"a": 0, "b": 0}, {"a": 1, "b": 97}]}]}}}
